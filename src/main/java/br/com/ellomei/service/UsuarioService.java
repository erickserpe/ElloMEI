package br.com.ellomei.service;

import br.com.ellomei.domain.Role;
import br.com.ellomei.domain.Usuario;
import br.com.ellomei.event.UserRegisteredEvent;
import br.com.ellomei.exception.UsuarioDuplicadoException;
import br.com.ellomei.repository.RoleRepository;
import br.com.ellomei.repository.UsuarioRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.Set;

/**
 * Servi√ßo respons√°vel pela gest√£o de usu√°rios.
 *
 * Este servi√ßo implementa o padr√£o de Eventos de Dom√≠nio,
 * publicando eventos quando a√ß√µes importantes ocorrem (ex: novo usu√°rio registrado).
 *
 * @author ElloMEI Team
 * @since 1.0.0
 */
@Service
public class UsuarioService {

    private static final Logger logger = LoggerFactory.getLogger(UsuarioService.class);

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private PasswordEncoder passwordEncoder; // Injetamos o codificador de senhas

    @Autowired
    private ApplicationEventPublisher eventPublisher; // Publicador de eventos de dom√≠nio

    /**
     * Salva um novo usu√°rio no sistema.
     *
     * Este m√©todo:
     * 1. Valida se username e email s√£o √∫nicos
     * 2. Criptografa a senha do usu√°rio
     * 3. Associa a role padr√£o ROLE_USER ao usu√°rio
     * 4. Salva o usu√°rio no banco de dados
     * 5. Publica um evento UserRegisteredEvent para notificar outros componentes
     *
     * @param usuario O usu√°rio a ser salvo
     * @return O usu√°rio salvo com ID gerado
     * @throws UsuarioDuplicadoException se username ou email j√° existirem
     */
    public Usuario salvar(Usuario usuario) {
        logger.info("üìù Iniciando cadastro de novo usu√°rio: {}", usuario.getUsername());

        // Valida√ß√£o 1: Verifica se o username j√° existe
        validarUsernameUnico(usuario.getUsername());

        // Valida√ß√£o 2: Verifica se o email j√° existe
        validarEmailUnico(usuario.getEmail());

        // Criptografa a senha antes de salvar no banco
        String senhaOriginal = usuario.getPassword();
        usuario.setPassword(passwordEncoder.encode(senhaOriginal));
        logger.debug("üîí Senha criptografada com sucesso");

        // Busca a role ROLE_USER no banco de dados
        Role userRole = roleRepository.findByNome("ROLE_USER")
                .orElseThrow(() -> new RuntimeException("Erro: Role ROLE_USER n√£o encontrada no banco de dados."));

        // Associa a role ao usu√°rio
        usuario.setRoles(Set.of(userRole));
        logger.debug("üë§ Role ROLE_USER associada ao usu√°rio");

        // Salva o usu√°rio no banco de dados
        Usuario novoUsuario = usuarioRepository.save(usuario);
        logger.info("‚úÖ Usu√°rio {} cadastrado com sucesso! ID: {}", novoUsuario.getUsername(), novoUsuario.getId());

        // Publica o evento ap√≥s salvar
        // Isso permite que outros componentes (listeners) reajam ao registro
        // sem que o UsuarioService precise conhec√™-los
        eventPublisher.publishEvent(new UserRegisteredEvent(this, novoUsuario));
        logger.debug("üì¢ Evento UserRegisteredEvent publicado");

        return novoUsuario;
    }

    /**
     * Valida se o username √© √∫nico no sistema.
     *
     * @param username Username a ser validado
     * @throws UsuarioDuplicadoException se o username j√° existir
     */
    private void validarUsernameUnico(String username) {
        Optional<Usuario> usuarioExistente = usuarioRepository.findByUsername(username);
        if (usuarioExistente.isPresent()) {
            logger.warn("‚ö†Ô∏è Tentativa de cadastro com username duplicado: {}", username);
            throw new UsuarioDuplicadoException(
                "O nome de usu√°rio '" + username + "' j√° est√° em uso. Por favor, escolha outro."
            );
        }
        logger.debug("‚úÖ Username {} est√° dispon√≠vel", username);
    }

    /**
     * Valida se o email √© √∫nico no sistema.
     *
     * @param email Email a ser validado
     * @throws UsuarioDuplicadoException se o email j√° existir
     */
    private void validarEmailUnico(String email) {
        Optional<Usuario> usuarioExistente = usuarioRepository.findByEmail(email);
        if (usuarioExistente.isPresent()) {
            logger.warn("‚ö†Ô∏è Tentativa de cadastro com email duplicado: {}", email);
            throw new UsuarioDuplicadoException(
                "O email '" + email + "' j√° est√° cadastrado. Use outro email ou recupere sua senha."
            );
        }
        logger.debug("‚úÖ Email {} est√° dispon√≠vel", email);
    }
}