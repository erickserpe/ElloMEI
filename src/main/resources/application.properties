spring.application.name=SCF-MEI

# Conexao com o Banco de Dados MySQL
# Docker: usa 'mysql' como hostname (nome do servico no docker-compose)
# Local: usa 'localhost'
# IMPORTANTE: As credenciais vem do arquivo .env (nunca commite senhas no Git!)
spring.datasource.url=jdbc:mysql://${DB_HOST:mysql}:3306/${MYSQL_DATABASE:scf_mei_db}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=${MYSQL_USER:scf_user}
spring.datasource.password=${MYSQL_PASSWORD}

# Configuracoes do JPA/Hibernate
# Use 'update' for initial schema creation, then switch to 'validate' with Flyway
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# Executa o data.sql apos a criacao do schema pelo Hibernate
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always

# Flyway Configuration
# Disabled temporarily to let Hibernate create initial schema
# After first run, enable Flyway and set ddl-auto=validate
spring.flyway.enabled=false

# When enabling Flyway later:
# spring.flyway.enabled=true
# spring.flyway.baseline-on-migrate=true
# spring.flyway.baseline-version=1
# spring.jpa.hibernate.ddl-auto=validate

# Define o diretorio para salvar os arquivos de upload
file.upload-dir=./uploads/

# Aumenta o limite de tamanho para upload de arquivos
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Cache Configuration
# Use simple cache manager (in-memory) for development
# For production, consider using Redis or Hazelcast
spring.cache.type=simple
spring.cache.cache-names=categoriasPorUsuario,contatosPorUsuario,contasPorUsuario

# Mercado Pago Configuration
# IMPORTANTE: Configure as credenciais no arquivo .env
# Obtenha suas credenciais em: https://www.mercadopago.com.br/developers/panel/app
# Para testes, use as credenciais de teste (TEST-...)
# Para producao, use as credenciais de producao (APP_USR-...)
mercadopago.access-token=${MERCADOPAGO_ACCESS_TOKEN}
mercadopago.public-key=${MERCADOPAGO_PUBLIC_KEY}
mercadopago.webhook.secret=${MERCADOPAGO_WEBHOOK_SECRET:}

# Base URL da aplicacao (para callbacks do Mercado Pago e emails)
# Desenvolvimento: http://localhost:8080
# Producao: https://seudominio.com.br
app.base-url=${APP_BASE_URL:http://localhost:8080}

# ===================================
# CONFIGURACAO DE EMAIL (GOOGLE WORKSPACE / GMAIL)
# ===================================
# Para usar o Google Workspace ou Gmail, voce precisa:
# 1. Ativar a verificacao em duas etapas na sua conta Google
# 2. Gerar uma "Senha de App" em: https://myaccount.google.com/apppasswords
# 3. Usar a senha de app (16 caracteres) no lugar da senha normal
#
# IMPORTANTE: Nunca commite suas credenciais reais no Git!
# Use variaveis de ambiente em producao.

# Configuracoes do servidor SMTP do Google
# Google Workspace e Gmail usam o mesmo servidor SMTP
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME:noreply@seudominio.com.br}
spring.mail.password=${MAIL_PASSWORD:sua-senha-de-app-aqui}

# Nome do remetente (aparece no email)
spring.mail.properties.mail.smtp.from=${MAIL_FROM_NAME:SCF-MEI - Sistema de Controle Financeiro}

# Propriedades adicionais do JavaMail
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Encoding UTF-8 para suportar caracteres especiais
spring.mail.default-encoding=UTF-8

# Para debug (descomente se precisar ver logs detalhados)
# spring.mail.properties.mail.debug=true

# ===================================
# CONFIGURACAO DE SSL/HTTPS
# ===================================
# Para gerar certificado auto-assinado (desenvolvimento):
#   ./generate-ssl-cert.sh
#
# Para producao, use certificado de uma CA confiavel (Let's Encrypt, etc.)
#
# IMPORTANTE: Certificados auto-assinados causam avisos no navegador!

# Habilitar SSL/HTTPS (true/false)
server.ssl.enabled=${SSL_ENABLED:false}

# Porta HTTPS (padrao: 8443)
# Quando SSL esta habilitado, a aplicacao roda nesta porta
server.port=${SSL_ENABLED:false}?${SSL_PORT:8443}:${APP_PORT:8080}

# Caminho do keystore (arquivo .p12 ou .jks)
server.ssl.key-store=${SSL_KEYSTORE_PATH:keystore.p12}

# Senha do keystore
server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD:scfmei2025}

# Tipo do keystore (PKCS12 ou JKS)
server.ssl.key-store-type=${SSL_KEYSTORE_TYPE:PKCS12}

# Alias da chave no keystore
server.ssl.key-alias=${SSL_KEY_ALIAS:scfmei}

# Protocolo SSL/TLS
server.ssl.protocol=TLS

# Versoes habilitadas do TLS (apenas TLS 1.2 e 1.3 - mais seguros)
server.ssl.enabled-protocols=TLSv1.2,TLSv1.3

# Cipher suites (algoritmos de criptografia)
# Apenas cipher suites seguros e modernos
server.ssl.ciphers=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256

# ===================================
# ACTUATOR - Monitoramento e Metricas
# ===================================
# Spring Boot Actuator expoe endpoints para monitoramento

# Habilitar todos os endpoints (desenvolvimento)
management.endpoints.enabled-by-default=true

# Expor endpoints via web
management.endpoints.web.exposure.include=health,info,metrics,prometheus

# Base path para endpoints do Actuator
management.endpoints.web.base-path=/actuator

# Mostrar detalhes do health check
management.endpoint.health.show-details=when-authorized

# Habilitar componentes do health check
management.endpoint.health.show-components=always

# Informacoes da aplicacao
management.info.env.enabled=true
management.info.java.enabled=true
management.info.os.enabled=true

# Metricas customizadas
management.metrics.enable.jvm=true
management.metrics.enable.process=true
management.metrics.enable.system=true
management.metrics.enable.tomcat=true
management.metrics.enable.hikaricp=true

# Tags comuns para todas as metricas
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.environment=dev