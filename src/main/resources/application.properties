spring.application.name=SCF-MEI

# Conexao com o Banco de Dados MySQL
# Docker: usa 'mysql' como hostname (nome do servico no docker-compose)
# Local: usa 'localhost'
spring.datasource.url=jdbc:mysql://${DB_HOST:mysql}:3306/scf_mei_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=scf_user
spring.datasource.password=5522

# Configuracoes do JPA/Hibernate
# Use 'update' for initial schema creation, then switch to 'validate' with Flyway
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# Executa o data.sql apos a criacao do schema pelo Hibernate
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always

# Flyway Configuration
# Disabled temporarily to let Hibernate create initial schema
# After first run, enable Flyway and set ddl-auto=validate
spring.flyway.enabled=false

# When enabling Flyway later:
# spring.flyway.enabled=true
# spring.flyway.baseline-on-migrate=true
# spring.flyway.baseline-version=1
# spring.jpa.hibernate.ddl-auto=validate

# Define o diretorio para salvar os arquivos de upload
file.upload-dir=./uploads/

# Aumenta o limite de tamanho para upload de arquivos
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Cache Configuration
# Use simple cache manager (in-memory) for development
# For production, consider using Redis or Hazelcast
spring.cache.type=simple
spring.cache.cache-names=categoriasPorUsuario,contatosPorUsuario,contasPorUsuario

# Mercado Pago Configuration
# IMPORTANTE: Substitua pelos seus tokens reais em producao!
# Obtenha suas credenciais em: https://www.mercadopago.com.br/developers/panel/app
# Para testes, use as credenciais de teste (TEST-...)
mercadopago.access-token=${MERCADOPAGO_ACCESS_TOKEN:TEST-YOUR-ACCESS-TOKEN-HERE}
mercadopago.public-key=${MERCADOPAGO_PUBLIC_KEY:TEST-YOUR-PUBLIC-KEY-HERE}
mercadopago.webhook.secret=${MERCADOPAGO_WEBHOOK_SECRET:}

# Base URL da aplicacao (para callbacks do Mercado Pago)
app.base-url=${APP_BASE_URL:http://localhost:8080}

# ===================================
# CONFIGURACAO DE EMAIL (GMAIL)
# ===================================
# Para usar o Gmail, voce precisa:
# 1. Ativar a verificacao em duas etapas na sua conta Google
# 2. Gerar uma "Senha de App" em: https://myaccount.google.com/apppasswords
# 3. Usar a senha de app (16 caracteres) no lugar da senha normal
#
# IMPORTANTE: Nunca commite suas credenciais reais no Git!
# Use variaveis de ambiente em producao.

# Configuracoes do servidor SMTP do Gmail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME:seu-email@gmail.com}
spring.mail.password=${MAIL_PASSWORD:sua-senha-de-app-aqui}

# Propriedades adicionais do JavaMail
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Para debug (descomente se precisar ver logs detalhados)
# spring.mail.properties.mail.debug=true